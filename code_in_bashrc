# Get container id and name of exiting containers
dgrep() {
    local container_name="$1"

    # Get a list of matching container names and IDs
    local container_info=$(docker ps -a --filter "name=$container_name" --format "{{.Names}}:{{.ID}}")

    # Check if there are no matching containers
    if [ -z "$container_info" ]; then
        echo "No matching containers found for name '$container_name'."
        return 1
    fi

    # Display the list of matching container names and IDs
    echo "Matching containers for name '$container_name':"
    echo "$container_info"
}

# bash into an existing container
dbash() {
    local container_name="$1"

    # Get a list of matching container names and IDs
    local container_info=$(docker ps -a --filter "name=$container_name" --format "{{.Names}}:{{.ID}}")

    # Check if there are no matching containers
    if [ -z "$container_info" ]; then
        echo "No matching containers found for name '$container_name'."
        return 1
    fi

    # Create an array from the container names and IDs
    local container_array=($(echo "$container_info" | tr ':' ' '))

    # Check if there is only one matching container
    if [ ${#container_array[@]} -eq 2 ]; then
        local selected_container_name="${container_array[0]}"
        echo "Running command on selected container: $selected_container_name"
        docker exec -ti "$selected_container_name" /bin/bash
    else
        # Display a list of matching container names for user selection
        echo "Matching containers for name '$container_name':"
        for ((i=0; i<${#container_array[@]}; i+=2)); do
            echo "$((i/2 + 1)). ${container_array[i]}"
        done

        # Prompt the user to choose a container
        read -p "Enter the number of the container you want: " selection

        # Validate the user's input
        if [[ $selection =~ ^[0-9]+$ && $selection -ge 1 && $selection -le ${#container_array[@]}/2 ]]; then
            local selected_container_name="${container_array[(selection-1)*2]}"
            echo "Running command on selected container: $selected_container_name"
            
            # Run the command on the selected container
            docker exec -ti "$selected_container_name" /bin/bash
        else
            echo "Invalid selection. Please enter a valid number."
            return 1
        fi
    fi
}


# sh into an existing container
dsh() {
    local container_name="$1"

    # Get a list of matching container names and IDs
    local container_info=$(docker ps -a --filter "name=$container_name" --format "{{.Names}}:{{.ID}}")

    # Check if there are no matching containers
    if [ -z "$container_info" ]; then
        echo "No matching containers found for name '$container_name'."
        return 1
    fi

    # Create an array from the container names and IDs
    local container_array=($(echo "$container_info" | tr ':' ' '))

    # Check if there is only one matching container
    if [ ${#container_array[@]} -eq 2 ]; then
        local selected_container_name="${container_array[0]}"
        echo "Running command on selected container: $selected_container_name"
        docker exec -ti "$selected_container_name" /bin/sh
    else
        # Display a list of matching container names for user selection
        echo "Matching containers for name '$container_name':"
        for ((i=0; i<${#container_array[@]}; i+=2)); do
            echo "$((i/2 + 1)). ${container_array[i]}"
        done

        # Prompt the user to choose a container
        read -p "Enter the number of the container you want: " selection

        # Validate the user's input
        if [[ $selection =~ ^[0-9]+$ && $selection -ge 1 && $selection -le ${#container_array[@]}/2 ]]; then
            local selected_container_name="${container_array[(selection-1)*2]}"
            echo "Running command on selected container: $selected_container_name"
            
            # Run the command on the selected container
            docker exec -ti "$selected_container_name" /bin/sh
        else
            echo "Invalid selection. Please enter a valid number."
            return 1
        fi
    fi
}

# Execute something in an existing container
dex() {
    local container_name="$1"

    # Get a list of matching container names and IDs
    local container_info=$(docker ps -a --filter "name=$container_name" --format "{{.Names}}:{{.ID}}")

    # Check if there are no matching containers
    if [ -z "$container_info" ]; then
        echo "No matching containers found for name '$container_name'."
        return 1
    fi

    # Create an array from the container names and IDs
    local container_array=($(echo "$container_info" | tr ':' ' '))

    # Check if there is only one matching container
    if [ ${#container_array[@]} -eq 2 ]; then
        local selected_container_name="${container_array[0]}"
        echo "Running command on selected container: $selected_container_name"
        docker exec -ti "$selected_container_name" $2
    else
        # Display a list of matching container names for user selection
        echo "Matching containers for name '$container_name':"
        for ((i=0; i<${#container_array[@]}; i+=2)); do
            echo "$((i/2 + 1)). ${container_array[i]}"
        done

        # Prompt the user to choose a container
        read -p "Enter the number of the container you want: " selection

        # Validate the user's input
        if [[ $selection =~ ^[0-9]+$ && $selection -ge 1 && $selection -le ${#container_array[@]}/2 ]]; then
            local selected_container_name="${container_array[(selection-1)*2]}"
            echo "Running command on selected container: $selected_container_name"
            
            # Run the command on the selected container
            docker exec -ti "$selected_container_name" $2
        else
            echo "Invalid selection. Please enter a valid number."
            return 1
        fi
    fi
}

# Start an existing container
dstart(){
    local container_name="$1"

    # Get a list of matching container names and IDs
    local container_info=$(docker ps -a --filter "name=$container_name" --format "{{.Names}}:{{.ID}}")

    # Check if there are no matching containers
    if [ -z "$container_info" ]; then
        echo "No matching containers found for name '$container_name'."
        return 1
    fi

    # Create an array from the container names and IDs
    local container_array=($(echo "$container_info" | tr ':' ' '))

    # Check if there is only one matching container
    if [ ${#container_array[@]} -eq 2 ]; then
        local selected_container_name="${container_array[0]}"
        echo "Running command on selected container: $selected_container_name"
        docker start "$selected_container_name"
    else
        # Display a list of matching container names for user selection
        echo "Matching containers for name '$container_name':"
        for ((i=0; i<${#container_array[@]}; i+=2)); do
            echo "$((i/2 + 1)). ${container_array[i]}"
        done

        # Prompt the user to choose a container
        read -p "Enter the number of the container you want: " selection

        # Validate the user's input
        if [[ $selection =~ ^[0-9]+$ && $selection -ge 1 && $selection -le ${#container_array[@]}/2 ]]; then
            local selected_container_name="${container_array[(selection-1)*2]}"
            echo "Running command on selected container: $selected_container_name"
            
            # Run the command on the selected container
            docker start "$selected_container_name"
        else
            echo "Invalid selection. Please enter a valid number."
            return 1
        fi
    fi
}

# Start an existing container
drestart(){
    local container_name="$1"

    # Get a list of matching container names and IDs
    local container_info=$(docker ps -a --filter "name=$container_name" --format "{{.Names}}:{{.ID}}")

    # Check if there are no matching containers
    if [ -z "$container_info" ]; then
        echo "No matching containers found for name '$container_name'."
        return 1
    fi

    # Create an array from the container names and IDs
    local container_array=($(echo "$container_info" | tr ':' ' '))

    # Check if there is only one matching container
    if [ ${#container_array[@]} -eq 2 ]; then
        local selected_container_name="${container_array[0]}"
        echo "Running command on selected container: $selected_container_name"
        docker restart "$selected_container_name"
    else
        # Display a list of matching container names for user selection
        echo "Matching containers for name '$container_name':"
        for ((i=0; i<${#container_array[@]}; i+=2)); do
            echo "$((i/2 + 1)). ${container_array[i]}"
        done

        # Prompt the user to choose a container
        read -p "Enter the number of the container you want: " selection

        # Validate the user's input
        if [[ $selection =~ ^[0-9]+$ && $selection -ge 1 && $selection -le ${#container_array[@]}/2 ]]; then
            local selected_container_name="${container_array[(selection-1)*2]}"
            echo "Running command on selected container: $selected_container_name"
            
            # Run the command on the selected container
            docker restart "$selected_container_name"
        else
            echo "Invalid selection. Please enter a valid number."
            return 1
        fi
    fi
}

# Stop an existing container
dstop(){
    local container_name="$1"

    # Get a list of matching container names and IDs
    local container_info=$(docker ps -a --filter "name=$container_name" --format "{{.Names}}:{{.ID}}")

    # Check if there are no matching containers
    if [ -z "$container_info" ]; then
        echo "No matching containers found for name '$container_name'."
        return 1
    fi

    # Create an array from the container names and IDs
    local container_array=($(echo "$container_info" | tr ':' ' '))

    # Check if there is only one matching container
    if [ ${#container_array[@]} -eq 2 ]; then
        local selected_container_name="${container_array[0]}"
        echo "Running command on selected container: $selected_container_name"
        docker stop "$selected_container_name"
    else
        # Display a list of matching container names for user selection
        echo "Matching containers for name '$container_name':"
        for ((i=0; i<${#container_array[@]}; i+=2)); do
            echo "$((i/2 + 1)). ${container_array[i]}"
        done

        # Prompt the user to choose a container
        read -p "Enter the number of the container you want: " selection

        # Validate the user's input
        if [[ $selection =~ ^[0-9]+$ && $selection -ge 1 && $selection -le ${#container_array[@]}/2 ]]; then
            local selected_container_name="${container_array[(selection-1)*2]}"
            echo "Running command on selected container: $selected_container_name"
            
            # Run the command on the selected container
            docker stop "$selected_container_name"
        else
            echo "Invalid selection. Please enter a valid number."
            return 1
        fi
    fi
}

# Remove an existing container
drm(){
    local container_name="$1"

    # Get a list of matching container names and IDs
    local container_info=$(docker ps -a --filter "name=$container_name" --format "{{.Names}}:{{.ID}}")

    # Check if there are no matching containers
    if [ -z "$container_info" ]; then
        echo "No matching containers found for name '$container_name'."
        return 1
    fi

    # Create an array from the container names and IDs
    local container_array=($(echo "$container_info" | tr ':' ' '))

    # Check if there is only one matching container
    if [ ${#container_array[@]} -eq 2 ]; then
        local selected_container_name="${container_array[0]}"
        echo "Running command on selected container: $selected_container_name"
        docker rm "$selected_container_name"
    else
        # Display a list of matching container names for user selection
        echo "Matching containers for name '$container_name':"
        for ((i=0; i<${#container_array[@]}; i+=2)); do
            echo "$((i/2 + 1)). ${container_array[i]}"
        done

        # Prompt the user to choose a container
        read -p "Enter the number of the container you want: " selection

        # Validate the user's input
        if [[ $selection =~ ^[0-9]+$ && $selection -ge 1 && $selection -le ${#container_array[@]}/2 ]]; then
            local selected_container_name="${container_array[(selection-1)*2]}"
            echo "Running command on selected container: $selected_container_name"
            
            # Run the command on the selected container
            docker rm "$selected_container_name"
        else
            echo "Invalid selection. Please enter a valid number."
            return 1
        fi
    fi
}

# Stop and remove an existing container
dsrm(){
    local container_name="$1"

    # Get a list of matching container names and IDs
    local container_info=$(docker ps -a --filter "name=$container_name" --format "{{.Names}}:{{.ID}}")

    # Check if there are no matching containers
    if [ -z "$container_info" ]; then
        echo "No matching containers found for name '$container_name'."
        return 1
    fi

    # Create an array from the container names and IDs
    local container_array=($(echo "$container_info" | tr ':' ' '))

    # Check if there is only one matching container
    if [ ${#container_array[@]} -eq 2 ]; then
        local selected_container_name="${container_array[0]}"
        echo "Running command on selected container: $selected_container_name"
        docker stop "$selected_container_name"
        docker rm "$selected_container_name"
    else
        # Display a list of matching container names for user selection
        echo "Matching containers for name '$container_name':"
        for ((i=0; i<${#container_array[@]}; i+=2)); do
            echo "$((i/2 + 1)). ${container_array[i]}"
        done

        # Prompt the user to choose a container
        read -p "Enter the number of the container you want: " selection

        # Validate the user's input
        if [[ $selection =~ ^[0-9]+$ && $selection -ge 1 && $selection -le ${#container_array[@]}/2 ]]; then
            local selected_container_name="${container_array[(selection-1)*2]}"
            echo "Running command on selected container: $selected_container_name"
            
            # Run the command on the selected container
            docker stop "$selected_container_name"
            docker rm "$selected_container_name"
        else
            echo "Invalid selection. Please enter a valid number."
            return 1
        fi
    fi
}

# Get logs of an existing container
dlog(){
    local container_name="$1"

    # Get a list of matching container names and IDs
    local container_info=$(docker ps -a --filter "name=$container_name" --format "{{.Names}}:{{.ID}}")

    # Check if there are no matching containers
    if [ -z "$container_info" ]; then
        echo "No matching containers found for name '$container_name'."
        return 1
    fi

    # Create an array from the container names and IDs
    local container_array=($(echo "$container_info" | tr ':' ' '))

    # Check if there is only one matching container
    if [ ${#container_array[@]} -eq 2 ]; then
        local selected_container_name="${container_array[0]}"
        echo "Running command on selected container: $selected_container_name"
        docker logs "$selected_container_name"
    else
        # Display a list of matching container names for user selection
        echo "Matching containers for name '$container_name':"
        for ((i=0; i<${#container_array[@]}; i+=2)); do
            echo "$((i/2 + 1)). ${container_array[i]}"
        done

        # Prompt the user to choose a container
        read -p "Enter the number of the container you want: " selection

        # Validate the user's input
        if [[ $selection =~ ^[0-9]+$ && $selection -ge 1 && $selection -le ${#container_array[@]}/2 ]]; then
            local selected_container_name="${container_array[(selection-1)*2]}"
            echo "Running command on selected container: $selected_container_name"
            
            # Run the command on the selected container
        docker logs "$selected_container_name"
        else
            echo "Invalid selection. Please enter a valid number."
            return 1
        fi
    fi
}

#clear the logs for specifc container
dlogc(){
    # Get the container ID using a name or partial name
    local container_id=$(docker ps -qf "name=$1")
    if [ -z "$container_id" ]; then
        echo "Container not found"
        return 1
    fi

    # Get the log file path of the container
    local log_path=$(docker inspect --format='{{.LogPath}}' "$container_id")
    if [ -z "$log_path" ]; then
        echo "Log path not found"
        return 1
    fi

    # Clear the log file
    echo -n > "$log_path"
    echo "Logs cleared for container $1"
}

# Inspect container
dinspect(){
    local container_name="$1"

    # Get a list of matching container names and IDs
    local container_info=$(docker ps -a --filter "name=$container_name" --format "{{.Names}}:{{.ID}}")

    # Check if there are no matching containers
    if [ -z "$container_info" ]; then
        echo "No matching containers found for name '$container_name'."
        return 1
    fi

    # Create an array from the container names and IDs
    local container_array=($(echo "$container_info" | tr ':' ' '))

    # Check if there is only one matching container
    if [ ${#container_array[@]} -eq 2 ]; then
        local selected_container_name="${container_array[0]}"
        echo "Running command on selected container: $selected_container_name"
        docker inspect "$selected_container_name"
    else
        # Display a list of matching container names for user selection
        echo "Matching containers for name '$container_name':"
        for ((i=0; i<${#container_array[@]}; i+=2)); do
            echo "$((i/2 + 1)). ${container_array[i]}"
        done

        # Prompt the user to choose a container
        read -p "Enter the number of the container you want: " selection

        # Validate the user's input
        if [[ $selection =~ ^[0-9]+$ && $selection -ge 1 && $selection -le ${#container_array[@]}/2 ]]; then
            local selected_container_name="${container_array[(selection-1)*2]}"
            echo "Running command on selected container: $selected_container_name"
            
            # Run the command on the selected container
        docker inspect "$selected_container_name"
        else
            echo "Invalid selection. Please enter a valid number."
            return 1
        fi
    fi
}
